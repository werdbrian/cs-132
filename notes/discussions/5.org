* Fn modifications
** substitution

   Normally capture avoiding substitution

*** closures

    fn(x){
      fn(y) {
        x
      }
    }(1)

*** substitution

    fn(y){
      1 <-- x replaced by 1
    }


*** won't work (easily) for vapor, closure state

    fn(x){
      fn(y){
        x(y) <-- have to get x in there
      }
    }

** without closures

   vapor supports passing function addresses

*** true:

    fn(x, y){
      x
    }

*** false

    fn(x, y){
      y
    }

*** and

    fn(x, y, t, f) {
      x(y, false)(t, f)
    }

** wait why are the types gone?

   for simplicity's sake
   under the assumption the program will not go wrong

* Vapor generation
** and.vapor
** rules
** by hand

   fn(x,y){ x }(1)
