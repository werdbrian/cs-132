//
// Generated by JTB 1.3.2
//



PARSER_BEGIN(Fn)
package parser;

import parser.Fn;
import syntaxtree.*;
import java.util.Vector;


public class Fn 
{
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(Fn)

SKIP :
{
   " "
   | "\t"
   | "\n"
   | <"#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN :
{
   <FN: "fn">
   | <LPAREN: "(">
   | <RPAREN: ")">
   | <LCURLY: "{">
   | <RCURLY: "}">
   | <TINT: "int">
   | <VAR: ["a"-"z"] (["a"-"z"] | ["0"-"9"])*>
   | <ARROW: "->">
   | <N: ["1"-"9"] (["0"-"9"])*>
}

Prog Prog() :
{
   Expr n0;
   NodeToken n1;
   Token n2;

   
}
{
   n0=Expr()
   n2=<EOF> { 
      n2.beginColumn++; n2.endColumn++;
      n1 = JTBToolkit.makeNodeToken(n2);
   }
   
   { return new Prog(n0,n1); }
}

Expr Expr() :
{
   NodeChoice n0;
   NodeSequence n1;
   Abs n2;
   RApp n3;
   NodeSequence n4;
   Var n5;
   RApp n6;
   Int n7;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=Abs()
      { n1.addNode(n2); }
      n3=RApp()
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n4 = new NodeSequence(2); }
      n5=Var()
      { n4.addNode(n5); }
      n6=RApp()
      { n4.addNode(n6); }
      { n0 = new NodeChoice(n4, 1); }
   |
      n7=Int()
      { n0 = new NodeChoice(n7, 2); }
   )
   
   { return new Expr(n0); }
}

Abs Abs() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   RType n4;
   NodeToken n5;
   Token n6;
   RParam n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   Expr n12;
   NodeToken n13;
   Token n14;

   
}
{
   n1=<FN> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=RType()
   n6=<VAR> { n5 = JTBToolkit.makeNodeToken(n6); }
   n7=RParam()
   n9=")" { n8 = JTBToolkit.makeNodeToken(n9); }
   n11="{" { n10 = JTBToolkit.makeNodeToken(n11); }
   n12=Expr()
   n14="}" { n13 = JTBToolkit.makeNodeToken(n14); }
   
   { return new Abs(n0,n2,n4,n5,n7,n8,n10,n12,n13); }
}

RParam RParam() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   RType n4;
   NodeToken n5;
   Token n6;
   RParam n7;

   
}
{
   (
      { n1 = new NodeSequence(4); }
      n3="," { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=RType()
      { n1.addNode(n4); }
      n6=<VAR> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n1.addNode(n5); }
      n7=RParam()
      { n1.addNode(n7); }
      { n0.addNode(n1); }
   )?
   
   { return new RParam(n0); }
}

RApp RApp() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expr n4;
   RArg n5;
   NodeToken n6;
   Token n7;
   RApp n8;

   
}
{
   (
      { n1 = new NodeSequence(5); }
      n3="(" { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expr()
      { n1.addNode(n4); }
      n5=RArg()
      { n1.addNode(n5); }
      n7=")" { n6 = JTBToolkit.makeNodeToken(n7); }
      { n1.addNode(n6); }
      n8=RApp()
      { n1.addNode(n8); }
      { n0.addNode(n1); }
   )?
   
   { return new RApp(n0); }
}

RArg RArg() :
{
   NodeOptional n0 = new NodeOptional();
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   Expr n4;
   RArg n5;

   
}
{
   (
      { n1 = new NodeSequence(3); }
      n3="," { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n4=Expr()
      { n1.addNode(n4); }
      n5=RArg()
      { n1.addNode(n5); }
      { n0.addNode(n1); }
   )?
   
   { return new RArg(n0); }
}

RType RType() :
{
   TInt n0;
   NodeOptional n1 = new NodeOptional();
   NodeSequence n2;
   NodeToken n3;
   Token n4;
   RType n5;

   
}
{
   n0=TInt()
   (
      { n2 = new NodeSequence(2); }
      n4=<ARROW> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2.addNode(n3); }
      n5=RType()
      { n2.addNode(n5); }
      { n1.addNode(n2); }
   )?
   
   { return new RType(n0,n1); }
}

Var Var() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<VAR> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Var(n0); }
}

Int Int() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<N> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new Int(n0); }
}

TInt TInt() :
{
   NodeToken n0;
   Token n1;

   
}
{
   n1=<TINT> { n0 = JTBToolkit.makeNodeToken(n1); }
   
   { return new TInt(n0); }
}
