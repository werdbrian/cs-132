PARSER_BEGIN(Fn)
  class Fn { }
PARSER_END(Fn)

SKIP :
{ " " | "\t" | "\n" }

TOKEN:
{ < FN: "fn" >,
| < LPAREN: "(" >,
| < RPAREN: ")" >,
| < LCURLY: "{" >,
| < RCURLY: "}" >,
| < ID: ["a"-"z"](["a"-"z"] | ["0"-"9"])* >,
| < N: ["1"-"9"]["0"-"9"]* >
}

void Prog() :
{}
{ Expr() EOF }

void Expr() :
{}
{ Abs() RApp() }

void Abs() :
{}
{ <FN> "(" <ID> ")" "{" Expr() "}" }

void RApp() :
{}
{ '(' Expr() ')' RApp() }

/*
void Abs() :
{}
{ <FN> "(" Id() ")" "{" Expr() "}" }

void Id() :
{}
{ <ID> }
*/
