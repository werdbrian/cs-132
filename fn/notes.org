* fn a small functional language
* abstraction

  fn(x){ ... }

* application

  fn(1)
  bar(fn(x){ ... }(1))

* boolean

** true

  fn(a){ fn(b){a} }

** false

  fn(a){ fn(b){b} }

** and

  fn(t){  # if it's true
    fn(f){ # if it's false
      fn(b1){ # first bool
        fn(b2){ # second bool
          # if b1 is true then it will return b2
          # otherwise the b1 is false and so b1 & b2 is false so f
          # if b1 is true and b2 is true then t
          # otherwise f
          b1(b2)(f)(t)(f)
          # b1(b2)(f)(t)(f)
        }
      }
    }
  }

* javacc install
* jtb install

http://compilers.cs.ucla.edu/jtb/

* vagrant

* grammar
** left recursive

   expr := abs | app | n
   app  := expr '(' expr ')'
   abs  := fn '(' id ')' '{' expr '}'
   id   := [a-z]([a-z0-9])*
   n    := [1-9]([0-9])*

** right recursive

   expr := abs rapp | n rapp
   rapp := '(' expr ')' rapp | e'
   abs  := fn '(' id ')' '{' expr '}'
   id   := [a-z]([a-z0-9])*
   n    := [1-9]([0-9])*

* JavaCC generated code

  tokenizer
  semantic actions

* JTB generated code

  visitor
  step through nodes
  attempt to write evaluation for some basic terms
