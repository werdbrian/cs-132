PARSER_BEGIN(Fn)
package parser;

public class Fn {
}
PARSER_END(Fn)

SKIP :
{ " "
| "\t"
| "\n"
/* single line comments */
| <"#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN:
{ < FN: "fn" >
| < LPAREN: "(" >
| < RPAREN: ")" >
| < LCURLY: "{" >
| < RCURLY: "}" >
| < ID: ["a"-"z"](["a"-"z"] | ["0"-"9"])* >
| < N: ["1"-"9"](["0"-"9"])* >
}

void Prog() :
{}
{ Expr() <EOF> }

void Expr() :
{ String abs; }
{ abs=Abs() RApp() { System.out.println( "param: " + abs ); }
| <N> RApp()
}

String Abs() :
{ Token id; }
{
  <FN> "(" id=<ID> ")" "{" Expr() "}" { return id.image; }
}

void RApp() :
{}
{ ( "(" Expr() ")" RApp() )? }

/*
void Abs() :
{}
{ <FN> "(" Id() ")" "{" Expr() "}" }

void Id() :xo
{}
{ <ID> }
*/
